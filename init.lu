-- Packer Initialization
vim.cmd [[packadd packer.nvim]]

require('packer').startup(function(use)
  -- Package manager itself
  use 'wbthomason/packer.nvim'
  
  -- UI Enhancements
  use 'nvim-lualine/lualine.nvim' -- Statusline
  use 'kyazdani42/nvim-web-devicons' -- Icons

  -- Syntax Highlighting & Colorschemes
  use { 'nvim-treesitter/nvim-treesitter', run = ':TSUpdate' }
  use 'gruvbox-community/gruvbox' -- Gruvbox colorscheme

  -- File Explorer
  use 'nvim-tree/nvim-tree.lua'

  -- LSP (Language Server Protocol)
  use 'neovim/nvim-lspconfig'
  use 'hrsh7th/nvim-cmp' -- Autocompletion
  use 'HallerPatrick/py_lsp.nvim'


  -- Git Integration
  use 'lewis6991/gitsigns.nvim'

  -- Fuzzy Finder
  use { 'nvim-telescope/telescope.nvim', requires = { 'nvim-lua/plenary.nvim' } }
end)

-- Basic Settings
vim.o.number = true            -- Line numbers
vim.o.relativenumber = true    -- Relative line numbers
vim.o.mouse = 'a'              -- Enable mouse
vim.o.clipboard = 'unnamedplus' -- Use system clipboard
vim.o.expandtab = true         -- Use spaces instead of tabs
vim.o.shiftwidth = 2           -- Indent size
vim.o.smartindent = true       -- Smarter indentation
vim.g.mapleader = ' '

-- Set up Pyright for Python LSP
local lspconfig = require('lspconfig')

-- Detect the Conda environment path
local function get_python_path(workspace)
  local venv = os.getenv("CONDA_PREFIX")
  if venv then
    return venv .. "/bin/python"
  else
    -- Fall back to default Python or use workspace settings
    return vim.fn.exepath("python") or "python"
  end
end

-- Pyright setup for Anaconda
lspconfig.pyright.setup({
  on_attach = function(client, bufnr)
    -- Optional: Custom keybindings for LSP actions
    local opts = { noremap = true, silent = true }
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<Cmd>lua vim.lsp.buf.references()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>rn', '<Cmd>lua vim.lsp.buf.rename()<CR>', opts)
  end,
  settings = {
    python = {
      pythonPath = get_python_path(),
    },
  },
})

-- Keybindings
-- Open file explorer with <leader>e
vim.api.nvim_set_keymap('n', '<leader>e', ':NvimTreeToggle<CR>', { noremap = true, silent = true })

-- Save file with <leader>w
vim.api.nvim_set_keymap('n', '<leader>w', ':w<CR>', { noremap = true, silent = true })

-- Quit Neovim with <leader>q
vim.api.nvim_set_keymap('n', '<leader>q', ':q<CR>', { noremap = true, silent = true })

-- Search files with <leader>ff
vim.api.nvim_set_keymap('n', '<leader>ff', ':Telescope find_files<CR>', { noremap = true, silent = true })

-- Search text in project with <leader>fg
vim.api.nvim_set_keymap('n', '<leader>fg', ':Telescope live_grep<CR>', { noremap = true, silent = true })

-- Lualine setup
require('lualine').setup()

-- Nvim-tree setup
require('nvim-tree').setup {
  view = { width = 30 }
}

-- Treesitter setup
require('nvim-treesitter.configs').setup {
  ensure_installed = "all",
  highlight = { enable = true }
}

-- Lspconfig setup
require('lspconfig').pyright.setup {}

